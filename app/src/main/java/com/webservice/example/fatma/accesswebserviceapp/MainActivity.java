package com.webservice.example.fatma.accesswebserviceapp;

import android.os.Bundle;
import android.app.Activity;
import android.util.Log;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.view.View;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpGet;
import org.json.JSONException;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.client.HttpClient;
import org.apache.http.HttpResponse;
import org.apache.http.HttpEntity;

import java.io.IOException;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import android.os.AsyncTask;
import org.json.JSONObject;
import org.apache.http.StatusLine;
import org.json.JSONArray;

import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.text.NumberFormat;



public class MainActivity extends Activity {
    String city="";
    String hashstore="";
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        Button submitButton = (Button)this.findViewById(R.id.submit_btn);

        submitButton.setOnClickListener(new Button.OnClickListener(){
            public void onClick(View v) {
                String hashAlgorithm="";
                String needtoHash="";
                EditText restfulApiUrl=(EditText)findViewById(R.id.apiUrl);
                EditText cityName = (EditText) findViewById(R.id.city_name);
                hashAlgorithm=cityName.getText().toString().trim();
                EditText countryName = (EditText) findViewById(R.id.country_name);
                needtoHash=countryName.getText().toString().trim();
                //String url="http://api.openweathermap.org/data/2.5/weather?q="+city+","+country+"&APPID=768eebf97e23a466099c99a8233a3434";
                //new ReadJSONFeed().execute(url);
                String url="http://"+restfulApiUrl.getText().toString().trim();
                //needtoHash="This MessageDigest class provides applications the functionality of a message digest algorithm, such as SHA-1 or SHA-256 Message digests are secure one-way hash functions that take arbitrary-sized data and output a fixed-length hash value";
                String needtoHash1="This error occurs very infrequently in Web browsers, because most browsers will accept any data returned from the Web server.\n" +
                        "\n" +
                        "If the client is not a Web browser, then anyone can only investigate the problem by looking at the Accept headers generated by the client system and the data stream returned by the Web server. If you do not have access to the source code for these systems, the only thing you can do is refer the problem to technical support people at the companies that developed the systems";
                RequestPackage p = new RequestPackage();
                p.setMethod("POST");
                p.setUri(url);
                p.setParam("hashAlgo", hashAlgorithm);
                p.setParam("toHash",needtoHash);
                new ReadJSONFeed2().execute(p);
            }
        });
    }
    private class ReadJSONFeed extends AsyncTask<String, String, String> {
        protected void onPreExecute() {}
        @Override
        protected String doInBackground(String... urls) {
            Log.i("Check RestfulApi","IN Backgroud ");
            HttpClient httpclient = new DefaultHttpClient();
            StringBuilder builder = new StringBuilder();
            HttpPost httppost = new HttpPost(urls[0]);
            try {
                HttpResponse response = httpclient.execute(httppost);
                StatusLine statusLine = response.getStatusLine();
                int statusCode = statusLine.getStatusCode();
                if (statusCode == 200) {
                    HttpEntity entity = response.getEntity();
                    InputStream content = entity.getContent();
                    BufferedReader reader = new BufferedReader(new InputStreamReader(content));
                    String line;
                    while ((line = reader.readLine()) != null) {
                        builder.append(line);
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            return builder.toString();
        }
        protected void onPostExecute(String result) {
            String weatherInfo="Weather Report of "+city +" is: \n";
            try{
                JSONObject jsonObject = new JSONObject(result);
                JSONObject jscoordObject = new JSONObject(jsonObject.getString("coord"));
                weatherInfo+="Longitude: "+jscoordObject.getString("lon")+"\n";
                weatherInfo+="Latitude: "+jscoordObject.getString("lat")+"\n";
                JSONArray jsweatherObject = new JSONArray(jsonObject.getString("weather"));
                JSONObject jweatherObject = jsweatherObject.getJSONObject(0);
                weatherInfo+="Clouds: "+jweatherObject.getString("description")+"\n";
                JSONObject jsmainObject = new JSONObject(jsonObject.getString("main"));
                weatherInfo+="Humidity: "+jsmainObject.getString("humidity")+"% \n";
                weatherInfo+="Atmospheric Pressure: "+jsmainObject.getString("pressure")+"hPa \n";
                float temp=Float.parseFloat(jsmainObject.getString("temp"));
                temp = temp - (float) 273.15;
                NumberFormat df = NumberFormat.getNumberInstance();
                df.setMaximumFractionDigits(2);
                weatherInfo+="Temperature: "+ String.valueOf(df.format(temp)) +" C\n";
                JSONObject jswindObject = new JSONObject(jsonObject.getString("wind"));
                weatherInfo+="Wind Speed: "+jswindObject.getString("speed")+"mps \n";
            }
            catch (JSONException e) {
                e.printStackTrace();
            }
            TextView resp = (TextView) findViewById(R.id.response);
            if(weatherInfo.trim().length() >0 )
                resp.setText(weatherInfo);
            else
                resp.setText("Sorry no match found");
        }
    }

    private class ReadJSONFeed1 extends AsyncTask<String,String, String> {
        protected void onPreExecute() {}
        @Override
        protected String doInBackground(String... urls) {
            HttpClient httpclient = new DefaultHttpClient();
            StringBuilder builder = new StringBuilder();
            HttpGet httpget = new HttpGet(urls[0]);
            //JSONObject json =new JSONObject();

            //json.put('tag',"Hello Ali");
            try {
                HttpResponse response = httpclient.execute(httpget);
                StatusLine statusLine = response.getStatusLine();
                int statusCode = statusLine.getStatusCode();
                Log.i("StatusCode:",""+statusCode);
                if (statusCode == 200) {
                    HttpEntity entity = response.getEntity();
                    InputStream content = entity.getContent();
                    BufferedReader reader = new BufferedReader(new InputStreamReader(content));
                    String line;
                    while ((line = reader.readLine()) != null) {
                        builder.append(line);
                    }
                    Log.i("Successfull200:",""+line);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            return builder.toString();
        }
        protected void onPostExecute(String result) {
            String weatherInfo="Weather Report of "+city +" is: \n";
            try{
                JSONObject jsonObject = new JSONObject(result);
                Log.i("Check RestfulApi",""+jsonObject.getString("tag"));
            }
            catch (JSONException e) {
                e.printStackTrace();
            }

        }
    }

    private class ReadJSONFeed2 extends AsyncTask<RequestPackage,String, String> {
        protected void onPreExecute() {}
        @Override
        protected String doInBackground(RequestPackage... params) {

            String content = HttpManager.getData(params[0]);
            Log.d ("MainActivity","The returned value from Cognitec AWS is ");
            Log.d ("MainActivity"," The value:"+ content);
            hashstore=content;
            return content;

        }

        protected void onPostExecute(String result) {
            //String weatherInfo="Weather Report of "+city +" is: \n";
            /**
            try{
                JSONObject jsonObject = new JSONObject(result);
                Log.i("Check RestfulApi:Computed Hash: ",""+jsonObject.getString("tag"));
            }
            catch (JSONException e) {
                e.printStackTrace();
            }
             **/
            Log.i("RestComputed Hash: ",result);
            TextView resp = (TextView) findViewById(R.id.response);
            if(result.trim().length() >0 )
                resp.setText("Computed Hash Value: \n"+result);
            else
                resp.setText("Sorry no result found");

        }
    }

}